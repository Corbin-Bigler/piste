//
//  main.swift
//  piste-swift
//
//  Created by Corbin Bigler on 4/27/25.
//

import Foundation
import SwiftProtobuf
import SwiftProtobufPluginLibrary

let inputData = FileHandle.standardInput.readDataToEndOfFile()

func log(_ message: Any) {
    fputs("\(message)\n", stderr)
}

func typeName(_ name: String) -> String {
    var trimmed = name
    if trimmed.hasPrefix(".") {
        trimmed.removeFirst()
    }

    let parts = trimmed.split(separator: ".", omittingEmptySubsequences: false)

    let transformedParts = parts.map { part -> String in
        return String(part).capitalizingFirstLetter()
    }

    return transformedParts.joined(separator: "_")
}

func serviceName(package: String, service: String, method: String) -> String {
    var name = ""
    if !package.isEmpty {
        name += "\(typeName(package))_"
    }
    name += "\(service)"
    name += "\(method)"
    return name
}
func path(package: String, service: String, method: String) -> String {
    var name = ""
    if !package.isEmpty {
        name += "\(package)."
    }
    name += "\(service)."
    name += "\(method)"
    return name
}

do {
    let request = try Google_Protobuf_Compiler_CodeGeneratorRequest(serializedBytes: inputData)

    var response = Google_Protobuf_Compiler_CodeGeneratorResponse()
    response.supportedFeatures = UInt64(Google_Protobuf_Compiler_CodeGeneratorResponse.Feature.proto3Optional.rawValue)

    for file in request.protoFile {
        var fileResponse = Google_Protobuf_Compiler_CodeGeneratorResponse.File()
        fileResponse.name = "\(file.name).piste.pb.swift"

        var content = "// Generated by protoc-gen-piste-swift\n"
        content += "// Source: \(file.name)\n\n"
        content += "import Combine\nimport Piste\nimport SwiftProtobuf\n\n"

        for service in file.service {
            for method in service.method {
                let serviceProtocol: String
                if method.hasClientStreaming && method.hasServerStreaming { serviceProtocol = "StreamingPisteService" }
                else if method.hasClientStreaming { serviceProtocol = "UploadPisteService" }
                else if method.hasServerStreaming { serviceProtocol = "DownloadPisteService" }
                else { serviceProtocol = "CallPisteService" }
                
                let serviceName = serviceName(package: file.package, service: service.name, method: method.name) + "Service"
                content += "enum \(serviceName): \(serviceProtocol) {\n"
                
//                let requestType: String
//                if method.hasClientStreaming { requestType = "PassthroughSubject<\(typeName(method.inputType)), Error>" }
//                else { requestType = typeName(method.inputType) }
//                
//                let responseType: String
//                if method.hasServerStreaming { responseType = "PassthroughSubject<\(typeName(method.outputType)), Error>" }
//                else { responseType = typeName(method.outputType) }

                content += "    static let path: String = \"\(path(package: file.package, service: service.name, method: method.name))\"\n\n"
                content += "    typealias Request = \(typeName(method.inputType))\n"
                content += "    typealias Response = \(typeName(method.outputType))\n"
                
                content += "}\n\n"
            }
        }

        fileResponse.content = content
        response.file.append(fileResponse)
    }

    let outputData = try response.serializedData()
    FileHandle.standardOutput.write(outputData)
} catch {
    fputs("Failed to generate piste-swift output: \(error)\n", stderr)
    exit(1)
}

extension String {
    func lowercasingFirstLetter() -> String {
        guard let first = self.first else { return self }
        return first.lowercased() + self.dropFirst()
    }
}
extension String {
    func capitalizingFirstLetter() -> String {
        guard let first = self.first else { return self }
        return first.uppercased() + self.dropFirst()
    }
}

