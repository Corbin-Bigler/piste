// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Proto/piste.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct PisteFrame: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var path: String = String()
    
    var payload: SwiftProtobuf.Google_Protobuf_Any {
        get {return _payload ?? SwiftProtobuf.Google_Protobuf_Any()}
        set {_payload = newValue}
    }
    /// Returns true if `payload` has been explicitly set.
    var hasPayload: Bool {return self._payload != nil}
    /// Clears the value of `payload`. Subsequent reads from it will return its default value.
    mutating func clearPayload() {self._payload = nil}
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _payload: SwiftProtobuf.Google_Protobuf_Any? = nil
}

struct PisteErrorFrame: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var path: String {
        get {return _path ?? String()}
        set {_path = newValue}
    }
    /// Returns true if `path` has been explicitly set.
    var hasPath: Bool {return self._path != nil}
    /// Clears the value of `path`. Subsequent reads from it will return its default value.
    mutating func clearPath() {self._path = nil}
    
    var error: String = String()
    
    var message: String {
        get {return _message ?? String()}
        set {_message = newValue}
    }
    /// Returns true if `message` has been explicitly set.
    var hasMessage: Bool {return self._message != nil}
    /// Clears the value of `message`. Subsequent reads from it will return its default value.
    mutating func clearMessage() {self._message = nil}
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _path: String? = nil
    fileprivate var _message: String? = nil
}

public struct PisteCloseFrame: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    public var path: String = String()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct PisteGetServicesResponse: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var services: [String] = []
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

struct PisteServiceInformation: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var title: String = String()
    
    var description_p: String = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

public struct PisteGetInformationResponse: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var information: Dictionary<String,PisteServiceInformation> = [:]
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PisteFrame: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "PisteFrame"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "path"),
        2: .same(proto: "payload"),
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.path) }()
            case 2: try { try decoder.decodeSingularMessageField(value: &self._payload) }()
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !self.path.isEmpty {
            try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
        }
        try { if let v = self._payload {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: PisteFrame, rhs: PisteFrame) -> Bool {
        if lhs.path != rhs.path {return false}
        if lhs._payload != rhs._payload {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension PisteErrorFrame: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "PisteErrorFrame"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "path"),
        2: .same(proto: "error"),
        3: .same(proto: "message"),
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self._path) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.error) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self._message) }()
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._path {
            try visitor.visitSingularStringField(value: v, fieldNumber: 1)
        } }()
        if !self.error.isEmpty {
            try visitor.visitSingularStringField(value: self.error, fieldNumber: 2)
        }
        try { if let v = self._message {
            try visitor.visitSingularStringField(value: v, fieldNumber: 3)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: PisteErrorFrame, rhs: PisteErrorFrame) -> Bool {
        if lhs._path != rhs._path {return false}
        if lhs.error != rhs.error {return false}
        if lhs._message != rhs._message {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension PisteCloseFrame: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "PisteCloseFrame"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        4: .same(proto: "path"),
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 4: try { try decoder.decodeSingularStringField(value: &self.path) }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.path.isEmpty {
            try visitor.visitSingularStringField(value: self.path, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: PisteCloseFrame, rhs: PisteCloseFrame) -> Bool {
        if lhs.path != rhs.path {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension PisteGetServicesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "PisteGetServicesResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "services"),
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeRepeatedStringField(value: &self.services) }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.services.isEmpty {
            try visitor.visitRepeatedStringField(value: self.services, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: PisteGetServicesResponse, rhs: PisteGetServicesResponse) -> Bool {
        if lhs.services != rhs.services {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension PisteServiceInformation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "PisteServiceInformation"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        2: .same(proto: "title"),
        3: .same(proto: "description"),
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.title.isEmpty {
            try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
        }
        if !self.description_p.isEmpty {
            try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: PisteServiceInformation, rhs: PisteServiceInformation) -> Bool {
        if lhs.title != rhs.title {return false}
        if lhs.description_p != rhs.description_p {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension PisteGetInformationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "PisteGetInformationResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "information"),
    ]
    
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PisteServiceInformation>.self, value: &self.information) }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.information.isEmpty {
            try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,PisteServiceInformation>.self, value: self.information, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: PisteGetInformationResponse, rhs: PisteGetInformationResponse) -> Bool {
        if lhs.information != rhs.information {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}
